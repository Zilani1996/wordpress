pipeline{
agent any

 environment {
      //registryCredential = "${registryCredential}"
        registryCredential = 'registry_id'
       //DOCKER_REGISTRY1 = "${DOCKER_REGISTRY1}"
      //DOCKER_USERNAME =  "${DOCKER_USERNAME}"
      //DOCKER_PASSWORD = "${DOCKER_PASSWORD}"
       //KUBE_CONFIG = "${KUBE_CONFIG}"
        DOCKER_REGISTRY = "registry.digitalocean.com/vendorcity"
        DOCKER_USERNAME = credentials('registry_id')
        DOCKER_PASSWORD = credentials('registry_id')
        KUBE_CONFIG = credentials('registry_id')
    }
 
stages{
  stage("Code Clone"){
   steps{
    git url :"https://github.com/Zilani1996/wordpress.git",branch:"master"
    }
  }

stage("Build") {
            steps {
                script { 
                   def appImage = docker.build("${DOCKER_REGISTRY}/wordpress-app:${env.BUILD_NUMBER}")
                   withCredentials([string(credentialsId: 'dop_v1_a368caa98150484cfda8c9686b10972210118a3f162f73f6068d64c5d15f1061', variable: 'dockerpwd')]) {
                      sh "docker login -u username -p ${dockerpwd}"
                     }
               appImage.push()
          
                 }
            }
        }

        stage("Deploy") {
            steps {
                script {
                    def kubeConfigPath = writeKubeConfig("${env.WORKSPACE}/kubeconfig", env.KUBE_CONFIG)
                    sh "kubectl --kubeconfig=${kubeConfigPath} apply -f deploy.yaml"
                }
            }
        }
        stage("Cleanup") {
            steps {
                script {
                    def kubeConfigPath = writeKubeConfig("${env.WORKSPACE}/kubeconfig", env.KUBE_CONFIG)
                    sh "kubectl --kubeconfig=${kubeConfigPath} delete -f deploy.yaml"
                }
            }
        }
     }
  post {
        always {
            script {
                if (getContext(hudson.FilePath)) {
                    deleteDir()
                }
            }
        }
    }

  }

def writeKubeConfig(String filePath, String kubeConfig) {
    def kubeConfigContent = credentials(kubeConfig).replaceAll("\r\n?", "\n")
    writeFile file: filePath, text: kubeConfigContent
    return filePath
}
